I"ù<p><em>
This part two of a series touching on essential parts of React.js to known when getting started. This will cover making components, handling data, component lifecycle, and using modern best practices to do so. Comfort with using terminal, Git, Github, HTML and JavaScript are recommended. Start with the <a href="/react-components" alt="first part of series, getting started with components">first part</a> of the series. If you get stuck, use this <a alt="Tutorial's github repository" target="_blank" href="https://github.com/PilgrimMemoirs/essential-react-tutorial">repository</a>, the branch titled 'data' will have the final solution for this part of the series.
<br /><br />
In the last post you should have set up the project along with 3 components (Park, Trail, and Review). This post is going to focus on delegating data to the appropriate component, and then having that component handle displaying the data.
</em></p>

<p><br /></p>

<h2> Setting up a component to handle data</h2>

<p>
In Park.js, on line 5, put ‚Äò{name}‚Äô in as the argument of the component. Then, use that argument by modifying line 5 to look like <code><h1>I'm { name } park!</h1></code>. This is the bare-minimum the component needs to show the data.
</p>

<p>
The next step is to pass data into the component to customize how it is displayed. In App.js, on line 9, add a name attribute to the Park component, like so: ‚Äò<Park name="Yellowstone" />‚Äô. The page, in your browser, should refresh to show ‚ÄòI'm Yellowstone park!‚Äô
</p>

<p>
What should we do if we also wanted to display Central Park and Stanley Park? Try it out and, afterwards, you can check here to compare your solution!
</p>
:ET