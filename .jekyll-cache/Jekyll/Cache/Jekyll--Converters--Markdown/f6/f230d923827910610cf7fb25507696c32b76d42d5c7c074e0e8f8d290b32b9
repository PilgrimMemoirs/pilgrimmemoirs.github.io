I"<p><em>
This part two of a series touching on essential parts of React.js to known when getting started. This will cover making components, handling data, component lifecycle, and using modern best practices to do so. Comfort with using terminal, Git, Github, HTML and JavaScript are recommended. Start with the <a href="/react-components" alt="first part of series, getting started with components">first part</a> of the series. If you get stuck, use this <a alt="Tutorial's github repository" target="_blank" href="https://github.com/PilgrimMemoirs/essential-react-tutorial">repository</a>, the branch titled 'data' will have the final solution for this part of the series.
<br /><br />
In the last post you should have set up the project along with 3 components (Park, Trail, and Review). This post is going to focus on delegating data to the appropriate component, and then having that component handle displaying the data.
</em></p>

<p><br /></p>

<h2> Setting up a component to handle data</h2>

<p>
 In App.js, on line 9, add a name attribute to the Park component, with the name of the park you want that component to render, like so: <code>&lt;Park name="Yellowstone"/&gt;’</code>. This how to pass data we want that specific component to handle.
</p>

<p>
To display the name of this park we go into Park.js. On line 5, put ‘{name}’ in as the parameter of the component, to look like this<code>function Park({name}) {</code>. The argument must have the same name as the attribute when rendering the component (like we did in App.js).
</p>

<p>
Now we can update the JSX to look like <code>&lt;h1&gt;I'm { name } park!&lt;/h1&gt;</code>. In JSX, when you want to use JavaScript it needs to be wrapped by curly braces. After you save, the page should refresh to show "I'm Yellowstone park!"!
</p>

<p>
What should we do if we also wanted to display Central Park and Stanley Park? Try it out and, afterwards, you can compare your code with this <a href="" alt="sample solution for setting up a component to render data">sample solution</a>!
</p>

<p><br />
<br /></p>
<h2>Passing data between components</h2>

<p>
When setting up components, it’s good to be mindful of the relationship between the components and which ones will render other components. That’s because, when it comes to handling data, it is best to pass information from the top-most components down to the components they render.
</p>

<p>
With this app, Trails belong to Parks. So we can pass data from a Park component to any of that Park’s trails. In App.js, add a trail attribute to Yellowstone Park component, like so: <code>trail="Mammoth Hot Springs"</code>. In Park.js, update the arguments to include 'trail', like so: <code>{name, trail}</code>.
</p>

<p>
This doesn’t change anything yet, that’s because the name of this trail needs to get passed down to Trail component, where we want it render. In Park.js, add a name attribute to Trail and pass the name of the trail variable to it, like so: <code>&lt;Trail name={ trail }/&gt;</code>
</p>

<p>
So, this name of this trail has gone by two different names as it has been passed. First it was set to trail, as it was passed to Park. Then, it was passed on to the Trail component as ‘name’.
</p>

<p>
Finally, to get the name to render, go to Trail.js and modify the h2 element to display the name, like so: <code>&lt;h2&gt;I'm { name } trail!&lt;/h2&gt;</code>
</p>

<figure>
  <img src="../images/react/react-data.png" alt="screenshot of code editor with current state of App.js, Park.js and Trail.js" />
</figure>

<p>
Data was just passed all the way from App.js to Park.js, then down to Trail.js!
</p>

<p><br />
<br /></p>
<h2>Structuring the Data</h2>

<p>
Now that we’ve come this far, it’s time to step back and observe what can be improved. There is something with the way we’re passing data that is very limiting to it’s functionality.
</p>

<p>
Notice how Park is only able to display one trail.
</p>

<p>
We might also want to include more information on both the Park and each Trail (like a description, location, fees, hours of operation, etc.), and we haven’t even considered how we’re going to pass the data for reviews on each. There’s a lot data that we are likely going to want to include with each component and having a separate attribute for each isn’t very sustainable
</p>

<p>
To prevent that, structure data in arrays and objects to pass as parameters. So, the next step is going to be to refactor the trail attribute of the Park component to take in an array of objects, where each object will have data on a trail.
</p>

<pre>
  <code>
    &lt;Park name="Yellowstone"  trails={[{name: "Mammoth Springs", difficulty: “moderate”}]}/&gt;
    &lt;Park name="Central" trails={[{name: "Fountain", difficulty: “easy”}]}/&gt;&lt;
    &lt;Park name="Stanley" trails={[{name: "Pond", difficulty: “easy”}]}/&gt;
  </code>
</pre>

<p>
Since the format of the trail data is different, the way it’s passed to Trail needs to be refactored. In Park.js, update the Trail element to have both a name and difficult attribute, then pass the data, like so: &lt;Trail name={ trails[0].name } difficulty={ trails[0].difficulty }/&gt;
</p>

<p>
Volia! We now have Trail data being rendered after being passed through a data structure!
</p>

<p>
Now is a good time to pause again and notice the flaws in the current design. There are a few things that aren’t as dynamic as they should be. The most notable is how a Trail is being rendered. Currently it is rendering one within each Park. This app should have the functionality of rendering multiple Trails for each Park.
</p>

<p>
The best way to make this happen is to loop over the array and create a Park element for each object inside of the array.
</p>

<p>
To see this loop in action, add another trail to any of the Parks by adding a new object in the array being passed to Park, like so: &lt;Park name="Yellowstone"  trails={[{name: "Mammoth Springs", difficulty: “moderate”}, {name: “trail 2”, difficulty: “hard”]}/&gt;
</p>

<p>
Now you should see two trails under Yellowstone!
</p>

<p>
Continue experimenting by adding more trails. Add another attribute to Parks and/or Trails and have it rendered.
</p>
:ET