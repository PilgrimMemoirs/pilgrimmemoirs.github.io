I"à+<p><em>
This part two of a series touching on essential parts of React.js to known when getting started. This will cover making components, handling data, component lifecycle, and using modern best practices to do so. Comfort with using terminal, Git, Github, HTML and JavaScript are recommended. Start with the <a href="/react-components" alt="first part of series, getting started with components" target="_blank">first part</a> of the series. If you get stuck, use this <a alt="Tutorial's github repository" target="_blank" href="https://github.com/PilgrimMemoirs/essential-react-tutorial">repository</a>, the branch titled 'data' will have the final solution for this part of the series.
<br /><br />
In the last post you should have set up the project along with 3 components (Park, Trail, and Review). This post is going to focus on delegating data to the appropriate component, and then having that component handle displaying the data.
</em></p>

<p><br /></p>

<h2> Setting up a component to handle data</h2>

<p>
 In App.js, on line 9, add a name attribute to the Park component, with the name of the park you want that component to render, like so: <code>&lt;Park name="Yellowstone"/&gt;‚Äô</code>. This how to pass data we want that specific component to handle.
</p>

<p>
To display the name of this park we go into Park.js. On line 5, put ‚Äò{name}‚Äô in as the argument of the component, so that it looks like this<code>function Park({name}) {</code>. Note the syntax, it is being defined within curly braces. This using an ES6 feature, <b>destructuring</b> to handle the <b>props</b> of this component.
</p>

<p>
Now we can update the JSX to look like <code>&lt;h1&gt;I'm { name } park!&lt;/h1&gt;</code>. In JSX, when you want to use JavaScript it needs to be wrapped by curly braces. After you save, the page should refresh to show "I'm Yellowstone park!"!
</p>

<p>
What should we do if we also wanted to display Central Park and Stanley Park? Try it out and, afterwards, you can compare your code with this <a href="" alt="sample solution for setting up a component to render data" target="_blank">sample solution</a>!
</p>

<p><br />
<br /></p>
<h2>Passing data between components</h2>

<p>
When setting up components, it‚Äôs good to be mindful of the relationship between the components and which ones will render other components. That‚Äôs because, when it comes to handling data, it is best to pass information from the top-most components down to the components they render.
</p>

<p>
With this app, Trails belong to Parks. So we can pass data from a Park component to any of that Park‚Äôs trails. In App.js, add a trail attribute to Yellowstone Park component, like so: <code>trail="Mammoth Hot Springs"</code>.
</p>

<p>
In Park.js, update the props to include 'trail', like so: <code>{name, trail}</code>.
</p>

<p>
This doesn‚Äôt change anything yet, that‚Äôs because the name of this trail needs to get passed down to Trail component, where we want it render. In Park.js, add a name attribute to Trail and pass the name of the trail variable to it, like so: <code>&lt;Trail name={ trail }/&gt;</code>
</p>

<p>
Note how the name of the trail has gone by two different variable names as it has been passed between components. First it was set to trail, as it was passed to Park. Then it was passed on to the Trail component as ‚Äòname‚Äô.
</p>

<p>
To get the name to render, go to Trail.js and modify the h2 element to display the name, like so: <code>&lt;h2&gt;I'm { name } trail!&lt;/h2&gt;</code>
</p>

<figure>
  <img src="../images/react/react-data.png" alt="screenshot of code editor with current state of App.js, Park.js and Trail.js" />
</figure>

<p>
Data was just passed all the way from App.js to Park.js, then down to Trail.js!
</p>

<p><br />
<br /></p>
<h2>Structuring the Data</h2>

<p>
Now is a good time to step back and observe what can be improved. Look at the way we‚Äôre passing data and notice ways that it is very limiting. Notice how Park is only able to display one Trail. Parks typically have more than one trail, so we will need to refactor to be able to render multiple trails.
</p>

<p>
We might also want to include more information on both the Park and each Trail, like a description, location, fees, hours of operation, etc. And we haven‚Äôt even considered how we‚Äôre going to pass the data for reviews on each. There‚Äôs a lot data that we are likely going to want to include with each component and having a separate attribute for each isn‚Äôt very sustainable.
</p>

<p>
Instead, to pass multiple trails, refactor the trail attribute of the Park component, in App.js, to take in an array of hashes, where each hash will have data on a different trail. Also, update the attribute name to 'trails', to better represent the list of trails it is now handling. Use the code below to reference:
</p>

<pre>
  <code>
    &lt;Park name="Yellowstone"  trails={[{name: "Mammoth Springs", difficulty: easy}, {name: "North Rim Trail", difficulty: "moderate"}]}/&gt;
    &lt;Park name="Central" trails={[{name: "North Woods", difficulty: "moderate"}]}/&gt;&lt;
    &lt;Park name="Stanley" trails={[{name: "Lost Lagoon", difficulty: ‚Äúeasy‚Äù}]}/&gt;
  </code>
</pre>

<p>
With this new format the Trail component needs to be refactored. In Park.js, change the parameter from 'trail' to 'trails', then update the Trail element to have both a name and difficult attribute. Pass the data from 'trail' to the Trail component,  like so: <code>&lt;Trail name={ trails[0].name } difficulty={ trails[0].difficulty }/&gt;</code>. Update Trail.js to show the difficulty anyway you please.
</p>

<p>
Volia! We now have Trail data being rendered after being passed through a data structure!
</p>

<p>
Now is a good time to pause again and notice the flaws in the current design. There are a few things that aren‚Äôt as dynamic as they should be. The most notable is how a Trail is being rendered. Currently it is rendering one within each Park. This app should dynamically render the multiple Trails for each Park.
</p>

<p>
The best way to make this happen is to loop over the array and create a Park element for each object inside of the array. Replace the single Trail component with the following code:
</p>

<pre>
  <code>
    {trails.map(trail =&gt; (
      &lt;Trail name={trail.name} difficulty={trail.difficulty}/&gt;
    ))}
  </code>
</pre>

<p>
Before moving on, make sure to understand how this code works. In short, <a href="https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d" alt="A blog post on the map function" target="_blank">the map function</a> is being called on the array of trails and where a <a href="https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/" alt="Free code camp post on callback functions" target="_blank">callback function</a> is used to create a new Trail component for each item/hike in the array. The callback function is using the new <a href="https://scotch.io/tutorials/es6-arrow-functions-in-javascript-getting-started" alt="scotch.io tutorial on arrow functions" target="_blank">ES6 arrow function</a> syntax. This code needs to be wrapped in curly braces, as does all JavaScript code within JSX.
</p>

<p>
Continue experimenting by adding more trails to each park. Add another attribute to Parks and/or Trails and have it rendered.
</p>

<p><br />
<br /></p>
<h2>Handling more data</h2>

<p>
Ideally this app will be able to handle thousands of parks, trails and reviews. In order to get it to do so, some more refactoring is necessary. Similarly to what was done with rending multiple trails for each park, we‚Äôre going to render multiple parks iteratively.
</p>

<p>
Before doing that, we‚Äôre going to change the way we are defining the data to be shown. Instead of having all of it hard coded in the components, we‚Äôre going to define all of it in one large data structure in App.js.
</p>

<p>
Copy and paste the following code in App.js after line 4 and before `function App() ‚Ä¶`
</p>

<pre>
const parkData = [
  {
    name: "Yellowstone",
    trails: [
      {name: "Mammoth Hot Springs", difficulty: "easy", reviews: []},
      {name: "North Rim", difficulty: "moderate", reviews: []},
      {name: "Avalanche Peak Trail", difficulty: "hard", reviews: []},
      {name: "Fairy Falls", difficulty: "easy", reviews: []}
    ],
    reviews: []
  },
  {
    name: "Central",
    trails: [
      {name: "North Woods", difficulty: "moderate", reviews: []},
      {name: "Outer Loop", difficulty: "easy", reviews: []},
    ],
    reviews: []
  },
  {
    name: "Stanley",
    trails: [
      {name: "Lost Lagoon", difficulty: "easy", reviews: []},
      {name: "Seawall Path", difficulty: "easy", reviews: []},
      {name: "Lover's Walk", difficulty: "easy", reviews: []}
    ],
    reviews: []
  }
]
</pre>

<p>
This data is meant to replace all the other data used so far. From this point, loops will be used to create new components, based on the data defined in this parkData. If you want to add new parks, trails or reviews, add the data for the new component within this data structure.
</p>

<p>
In App.js, loop through and define Park components like so:
</p>

<pre>
  <code>
    <div classname="App">
      {parkData.map(park =&gt; (
      &lt;Park
        name={park.name}
        trails={park.trails}
      /&gt;
      ))};
    </div>
  </code>
</pre>

<p>
In Park.js, loop through trails and make new Trail components like so:
</p>
<pre>
  <code>
    <div classname="Park">
      <h1>I'm { name } park!</h1>
      {trails.map(trail =&gt; (
        &lt;Trail name={trail.name} difficulty={trail.difficulty}/&gt;
      ))}
    </div>
  </code>
</pre>

<p>
Reviews are still missing, take a go at altering both the data and the components so that there are parks and trails that show a few reviews. Decide what data should be included for reviews, how it should be defined in parkData, and how it will be rendered.
</p>

<p>
Here is a <a href="" alt="sample solution with large data set" target="_blank">sample solution</a> to compare once you‚Äôre finished.
</p>

<p><br />
<br /></p>
<h2>Pass data from JSON file</h2>

<p>
Data is not typically defined within a file like this. It‚Äôs more common to have it called from a server, via an API or the backend of an application. It may come in the form of JSON, which is the perfect format to provide to a frontend application, since it uses JavaScript.
</p>

<p>
Since we‚Äôre not concerned about a backend or API with this tutorial, so we‚Äôre going to move this data to a JSON file. Make a new file, within /src, called data.json. Copy and paste the data structure currently being stored as ‚ÄòparkData‚Äô (don‚Äôt include the variable assignment in the JSOn file).
</p>

<p>
For App.js to access the data, it needs to be imported. At the top, under the last import statement, paste: <code>`import parkData from './data.json';`</code>
</p>

<p>
And everything should be working as expected! If it‚Äôs not, check out the full solution code.
</p>

<p><br />
<br /></p>
<h2> Review </h2>
:ET