I"Ö<p><em>
This part two of a series touching on essential parts of React.js to known when getting started. This will cover making components, handling data, component lifecycle, and using modern best practices to do so. Comfort with using terminal, Git, Github, HTML and JavaScript are recommended. Start with the <a href="/react-components" alt="first part of series, getting started with components">first part</a> of the series. If you get stuck, use this <a alt="Tutorial's github repository" target="_blank" href="https://github.com/PilgrimMemoirs/essential-react-tutorial">repository</a>, the branch titled 'data' will have the final solution for this part of the series.
<br /><br />
In the last post you should have set up the project along with 3 components (Park, Trail, and Review). This post is going to focus on delegating data to the appropriate component, and then having that component handle displaying the data.
</em></p>

<p><br /></p>

<h2> Setting up a component to handle data</h2>

<p>
 In App.js, on line 9, add a name attribute to the Park component, with the name of the park you want that component to render, like so: <code>&lt;Park name="Yellowstone"/&gt;â€™</code>. This will pass data the data we want that specific component to handle.
</p>

<p>
To display the name of this park we go into Park.js. On line 5, put â€˜{name}â€™ in as the argument of the component. The argument must have the same name as the attribute when rendering the component (like we did in App.js).
</p>

<p>
Use that argument by updating line 5 to look like <code>&lt;h1&gt;I'm { name } park!&lt;/h1&gt;</code>. In JSX, when you want to use JavaScript it needs to be wrapped by curly braces.
</p>

<p>
The page should refresh to show "I'm Yellowstone park!"! What should we do if we also wanted to display Central Park and Stanley Park? Try it out and, afterwards, you can compare your code with this <a href="" alt="sample solution for setting up a component to render data">sample solution</a>!
</p>
:ET