I"í<p><em>
This part two of a series touching on essential parts of React.js to known when getting started. This will cover making components, handling data, component lifecycle, and using modern best practices to do so. Comfort with using terminal, Git, Github, HTML and JavaScript are recommended. Start with the <a href="/react-components" alt="first part of series, getting started with components">first part</a> of the series. If you get stuck, use this <a alt="Tutorial's github repository" target="_blank" href="https://github.com/PilgrimMemoirs/essential-react-tutorial">repository</a>, the branch titled 'data' will have the final solution for this part of the series.
<br /><br />
In the last post you should have set up the project along with 3 components (Park, Trail, and Review). This post is going to focus on delegating data to the appropriate component, and then having that component handle displaying the data.
</em></p>

<p><br /></p>

<h2> Setting up a component to handle data</h2>

<p>
 In App.js, on line 9, add a name attribute to the Park component, with the name of the park you want that component to render, like so: <code>&lt;Park name="Yellowstone"/&gt;â€™</code>. This will pass data the data we want that specific component to handle.
</p>

<p>
To display the name of this park we go into Park.js. On line 5, put â€˜{name}â€™ in as the argument of the component. The argument must have the same name as the attribute when rendering the component (like we did in App.js).
</p>

<p>
Use that argument by updating line 5 to look like <code>&lt;h1&gt;I'm { name } park!&lt;/h1&gt;</code>. In JSX, when you want to use JavaScript it needs to be wrapped by curly braces.
</p>

<p>
The page should refresh to show "I'm Yellowstone park!"! What should we do if we also wanted to display Central Park and Stanley Park? Try it out and, afterwards, you can compare your code with this <a href="" alt="sample solution for setting up a component to render data">sample solution</a>!
</p>

<h2>Passing Data between Components</h2>

<p>
When setting up components, itâ€™s good to be mindful of the relationship between the components and which ones will render other components. Thatâ€™s because, when it comes to handling data, it is best to pass information from the top-most components down to the components they render.
</p>

<p>
With this app, Trails belong to Parks. So we can pass data from Park to any of that Parkâ€™s trails. In App.js, add a trail attribute to Yellowstone Park component, like so: <code>trail="Mammoth Hot Springs"</code>.
</p>

<p>
This doesnâ€™t change anything yet, thatâ€™s because the name of this trail needs to get passed down to Trail component for it to render. In Park.js, add a name attribute to Trail and pass the name of the trail to it, like so: <code>&lt;Trail name={ trail } /&gt;</code>
</p>

<p>
Notice that the name of the attribute we set the data to is going to be the name of the variable to use to access that data within the component.
</p>

<p>[[ screen shot, highlighting name of attribute and it getting called in the component ]]</p>

<p>
So, this name of this trail has gone by two different names as it has been passed. First it was set to trail, as it was passed to Park. Then, it was passed on to the Trail component as â€˜nameâ€™.
</p>

<p>
Finally, to get the name to render, go to Trail.js and modify the h2 element to display the name, like so: <code>&lt;h2&gt;I'm { name } trail!&lt;/h2&gt;</code>
</p>

<p>
Data was just passed all the way from App.js, to Park.js, to Trail.js!
</p>
:ET